/**
 * index.ts
 * 
 * Main KoaCart server file
 */

/**
 * Koa
 * 
 * Koa Application
 * @url https://www.npmjs.com/package/koa
 */
import * as Koa from 'koa';

/**
 * serve
 * 
 * Koa Static to serve static files
 * @url https://www.npmjs.com/package/koa-static
 */
import * as serve from 'koa-static';

/**
 * mongoose
 * 
 * MongoDB ORM
 * @url https://www.npmjs.com/package/mongoose
 */
import * as mongoose from 'mongoose';

/**
 * ApolloServer
 * 
 * Apollo Server for Koa
 * 
 * @https://www.npmjs.com/package/apollo-server-koa
 */
import { ApolloServer } from 'apollo-server-koa';

/**
 * https
 * 
 * NodeJs https server
 */
import https from 'https';

/**
 * readFileSync
 * 
 * Help to read file in sync
 */
import { readFileSync } from 'fs';

/**
 * config
 * 
 * KoaCart application configuration
 */
import config from './server/config';

/**
 * schema
 * 
 * KoaCart application GraphQL schema
 */
import schema from './server/schema';

/**
 * router
 * 
 * KoaCart application router
 * 
 * for / and /admin only
 */
import router from './server/router';

/**
 * response
 * 
 * Response middleware to track requests and response
 */
import response from './server/middleware/response';

/**
 * logger
 * 
 * Logger utility for KoaCart application
 */
import logger from './server/utility/logger';

/**
 * getTemplatePath
 * 
 * Utility method to access HTML template path generated by Angular
 */
import { getTemplatePath } from './server/utility/helper';

/**
 * server
 * 
 * AplloServer
 */
const server: ApolloServer = new ApolloServer(schema);

/**
 * mongoose setup
 * 
 * Setting up the mongoose to connect with MongoDb database
 */
mongoose.connect(config.database.URI, {
  useMongoClient: true
});
mongoose.connection.on('error', logger.error);
mongoose.Promise = global.Promise;

/**
 * app
 * 
 * Koa app
 */
const app: Koa = new Koa();

app
  .use(router)
  .use(response)
  .use(serve(getTemplatePath()));

server.applyMiddleware({ app });

if(config.app.PROTOCOL.toLowerCase() === 'https' && config.app.SSL_CERT !== '' && config.app.SSL_KEY !== '') {
  https.createServer({
    key: readFileSync(config.app.SSL_KEY, 'utf8'),
    cert: readFileSync(config.app.SSL_CERT, 'utf8')
  }, app.callback()).listen(config.app.PORT, config.app.HOST, () => {
    console.log(`Server started at ${config.app.PROTOCOL}://${config.app.HOST}:${config.app.PORT}`);
    logger.info(`Server started at ${config.app.PROTOCOL}://${config.app.HOST}:${config.app.PORT}`);
  });
}else {
  app.listen(config.app.PORT, config.app.HOST, () => {
    console.log(`Server started at ${config.app.PROTOCOL}://${config.app.HOST}:${config.app.PORT}`);
    logger.info(`Server started at ${config.app.PROTOCOL}://${config.app.HOST}:${config.app.PORT}`);
  });
}
